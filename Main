// Adventure Maze Game Dungeons and Dragons.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
using namespace std;

#include <string>
#include <iostream>
#include <iomanip>

#include "Maze.h"
#include "Room.h"
#include "Player.h"
#include "Adventure Maze Game Dungeons and Dragons.h"


void DisplayIntro() {
    cout << "Welcome to Dungeons and Dragons: Escape Norridor" << endl;

    cout << "King Arthur has locked you in the castle dungeon Norridor for the practice of witch craft and sorcery" << endl;
    cout << "You must navigate the dark dungeons and use any resources you find along the way to escape!" << endl;
    cout << "Be warned: The only one known to have escapped dungeon Norridor alive, is Merlin..." << endl;

    cout << endl;
}

string HBorder = "---";
char VBorder = '|';
string fullborder = "+---+---+---+---+---+";
string space = "   ";

char maze[6][6] = {                                     //Vertical borders consists of: '|', which will tell the program is traversing is legal
{'|', ' ', '|', ' ', ' ', '|'},            //0
{'|', ' ', ' ', ' ', '|', '|'},         //1
{'|', ' ', ' ', ' ', ' ', '|'},  //2
{'|', ' ', '|', ' ', ' ', '|'},  //3
{'|', ' ', ' ', '|', ' ', ' '},   //4
//0
};

string hMaze[6][5] = {                                  //horizontals borders consist of: "+---" and "+---+", which will tell the program if traversing rooms is legal
    {"+---", "+---", "+---", "+---", "+---+"},      //0
    {"+---", "+   ", "+---", "+   ", "+   +"},      //1     hx=0
    {"+---", "+---", "+---", "+---", "+   +"},      //2     hx=1
    {"+---", "+   ", "+---", "+---", "+---+"},      //3     hx=2
    {"+   ", "+---", "+   ", "+---", "+   +"},      //4     hx=3
    {"+---", "+---", "+---", "+---", "+   +"},      //5     hx=4
};

void DisplayBorder() {
    
    cout << fullborder << endl;
}

//this function uses 3 2D arrays to display the maze... holy cow! there must be a better way than this lol
void DisplayMaze(Room rooms[5][5]) {
    
    


    for (int i = 0; i < 5; i++) {               //Shows our 5 x 5 2D Array of room objects each with their own X,Y cordinants 0,0 to 4,4 
        
        if (i != 0) {                           //Probably sloppy... but to account for first line extra end line
            cout << endl;
        }
        for (int j = 0; j < 5; j++) {
            cout << hMaze[i][j];
        }
       
        cout << endl;

        for (int j = 0; j < 5; j++) {
            cout << setw(1) << maze[i][j] << setw(3) << left << rooms[i][j].RetChar();
            
        }
        cout << VBorder;
            
    }
    cout << endl;
    for (int i = 0; i < 5; i++) {
        cout << hMaze[5][i];
    }
    
    cout << endl;
    
    
}

        //Uses... umm semi-parrallel 2D arrays to test for borders that conflict in movement

void MovePlayer(Room rooms[5][5], vector<int>& xy, string direction) {
    
                    //Note: up/ down deals with horizontal borders, while left/right deals with vertical borders
    int temp;
    
    int x = xy.at(0);
    int y = xy.at(1);

    int hx = xy.at(0) + 1;                  //Adjust vertical x to test values in the other 2D array //hx IS PLAYER RELATIVE TO X AXIS OF WALLS
    int hy = xy.at(1);
    
    if (direction == "w") {
        if (x - 1 < 0) {
            cout << "You cannot move here" << endl;
            return;
        }
        else if (hMaze[hx - 1][hy] == "+---+" || hMaze[hx - 1][hy] == "+---") {         //If the values in the ...semi-parrallel array are a border, then do not allow
            cout << "You cannot move here" << endl;
        }
        else {
            rooms[x][y].SetHasPlayer(false);      //remove last location
            rooms[x - 1][y].SetHasPlayer(true);
        }

    }
    else if (direction == "s") {
        if ((x + 1) >= 5) {
            cout << "You cannot move here" << endl;
        } 
        else if (hMaze[hx][hy] == "+---+" || hMaze[hx][hy] == "+---") {
            cout << "You cannot move here" << endl;
        } 
        else {
            rooms[x][y].SetHasPlayer(false);
            rooms[x + 1][y].SetHasPlayer(true);
        }
    }
    else if (direction == "d") {
        if ((y + 1) > 5) {
            cout << "You cannot move here" << endl;

        }
        else if (maze[x][y + 1] == '|') {
            cout << "You cannot move here" << endl;
        }
        else {
            rooms[x][y].SetHasPlayer(false);      //remove last location
            rooms[x][y + 1].SetHasPlayer(true);
        }
    }
    else if (direction == "a") {
        if ((y - 1) < 0) {
            cout << "You cannot move here" << endl;

        }
        else if (maze[x][y] == '|') {
            cout << "You cannot move here error 2" << endl;
        }
        else {
            rooms[x][y].SetHasPlayer(false);      //remove last location
            rooms[x][y - 1].SetHasPlayer(true);
        }
    }
    
}

vector<int> Getxy(Room rooms[5][5]) {
    vector<int> xy;

    xy.clear();         //clear vector for multiple uses
    for (int i = 0; i < 5; i++) {

        for (int j = 0; j < 5; j++) {
            if (rooms[i][j].RetHasPlayer() == true) {
                xy.push_back(i);
                xy.push_back(j);
                break;
            }
        }
    }
    return xy;
}
int main()
{
    int x, y;
    bool playing = true;
    string input;
    string sentinel = "q";

    vector<int> xy;

    Room room;
    


    Room rooms[5][5];

    for (int i = 0; i < 5; i++) {               //Set 5 x 5 2D Array of room objects each with their own X,Y cordinants 0,0 to 4,4 
        
        for (int j = 0; j < 5; j++) {
            rooms[i][j].SetXY(i, j);
        }
    }

    rooms[0][0].SetHasPlayer(true);             //Set room 0,0 to players first location
    rooms[4][4].SetWinning(true);               //Set Winning room

    xy = Getxy(rooms);                          //Get players X,Y Location

    DisplayIntro();                             //Tell the player the first part of the story
    





    cout << endl;
    

    while (input != "q") {
        xy = Getxy(rooms);
        x = xy.at(0);
        y = xy.at(1);

        cout << "X,Y" << endl;
        cout << xy.at(0) << "," << xy.at(1) << endl << endl;
        DisplayMaze(rooms);                         //Displays the current maze

        cout << endl;

        cout << "w :move up" << endl;
        cout << "s :move down" << endl;
        cout << "a :move left" << endl;
        cout << "d :move right" << endl;

        cin >> input;

        MovePlayer(rooms, xy, input);

        if (rooms[x][y].RetWinning() == true) {
            cout << "Congratulations, You Won!" << endl;
            break;
        }
        
        

    }

    return 0;
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
